; SICP exercise 5.17
;
; Extend the instruction tracing of exercise 5.16 so that before printing an
; instruction, the simulator prints any labels that immediately precede that
; instruction in the controller sequence. Be careful to do this in a way that
; does not interfere with instruction counting (exercise 5.15). You will have
; to make the simulator retain the necessary label information.

(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels (cdr text)
        (lambda (insts labels)
          (let ((next-inst (car text)))
            (if (symbol? next-inst)
                (begin
                  (when (not (null? insts))
                    (set-instruction-label! (car insts) next-inst))
                  (receive insts
                           (cons (make-label-entry next-inst insts)
                                 labels)))
                (receive (cons (make-instruction next-inst)
                               insts)
                         labels)))))))

(define (make-instruction text)
  (mcons text (mcons '() (mcons '() '()))))
(define (instruction-text inst)
  (mcar inst))
(define (instruction-execution-proc inst)
  (mcar (mcdr inst)))
(define (instruction-label inst)
  (mcar (mcdr (mcdr inst))))
(define (instruction-labeled? inst)
  (not (null? (instruction-label inst))))
(define (set-instruction-execution-proc! inst proc)
  (set-mcar! (mcdr inst) proc))
(define (set-instruction-label! inst label)
  (set-mcar! (mcdr (mcdr inst)) label))


(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (trace-proc (lambda (inst) (void)))
        (tracing #f)
        (instruction-count 0))
    (let ((the-ops (list (list 'initialize-stack
                               (lambda () (stack 'initialize)))))
          (register-table (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table (cons (list name (make-register name))
                                       register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (let ((inst (car insts)))
                (cond ((and tracing (instruction-labeled? inst))
                       (trace-proc (instruction-label inst))
                       (trace-proc (instruction-text inst)))
                      (tracing
                       (trace-proc (instruction-text inst))))
                ((instruction-execution-proc inst))
                (set! instruction-count (+ instruction-count 1))
                (execute)))))
      (define (get-instruction-count)
        (let ((count instruction-count))
          (set! instruction-count 0)
          count))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'instruction-count) (get-instruction-count))
              ((eq? message 'install-trace-proc)
               (lambda (proc) (set! trace-proc proc)))
              ((eq? message 'trace-on) (set! tracing #t))
              ((eq? message 'trace-off) (set! tracing #f))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))
