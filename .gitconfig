#_______________________________________________________________________________
#
#                       Git configuration file
#_______________________________________________________________________________
#

#
# Good to be installed: "gitk" and "git-gui"
#

# Commit convention:
#
#  "+ " (for added)
#  "- " (for removed)
#  ": " (for changed)
#  "! " (for fixed).

#_______________________________________________________________________________
#                                                                        System

[user]
	name =
	email =

[core]
	excludesfile = ~/.gitignore
	quotepath = false
	# Do NOT auto-convert CRLF line endings into LF
	autocrlf = input
	# Do NOT check if converting CRLF is reversible
	safecrlf = false
	pager = less --quit-if-one-screen --quit-on-intr --hilite-unread -Mg

[diff]
	renames = copies

[branch]
	# Always setup 'git pull' to rebase instead of merge
	autosetuprebase = always
	autosetupmerge = true

[push]
	# Pushes will go the same place that pulls come from
	default = tracking

[merge]
	stat = true
	tool = kdiff3

[rebase]
	stat = true

[apply]
	whitespace = nowarn

[rerere]
	# To remove "wrong" merges delete .git/rr-cache/
	enabled = true
	autoupdate = true

[advice]
	pushNonFastForward = false
	statusHints = false

[gc]
	auto = 1

[color]
	ui = auto

#_______________________________________________________________________________
#                                                                       Aliases

[alias]
	# Serve local repository. Check with 'git ls-remote git://127.0.0.1/'
	serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git

	# Select hunks one by one
	record = !sh -c '(git add -p -- $@ && git commit -s) || git reset' --

	# Rollbacks
	uncommit = reset --soft HEAD^
	unstage = reset HEAD --
	amend = commit --amend --no-edit

	# When you need more information
	info = "!f() { git remote -v; git branch -rv; }; f"
	rank = shortlog -sn --no-merges
	ready = diff --staged --stat -p
	stashed = "!f() { for stash in $(git stash list | awk '{print $1}' | sed -e 's/://'); do (echo $stash && git stash show -p $stash); done }; f";
	ignored = !git ls-files --others --exclude-standard
	find = !git ls-tree -r --name-only HEAD |egrep --color $2

	st = status -sb
	ci = commit -s -v
	cl = clean -dfx --exclude=**/.* --exclude=**/target
	br = branch -a
	track = !sh -c 'git branch --track "$0" "origin/$0" && git checkout "$0"'
	up = "!f() { git remote update; git pull --rebase ; } ; f"

	# Patching and picking
	pick = cherry-pick
	patch-create = format-patch -w -s
	patch-dry = apply --stat --check
	patch = apply --ignore-whitespace --reject
	patch-apply = am -s

	# "Dry-run" merge towards origin/master by default. Can pass another branch as 1st param
	mergetest = "!f(){ git fetch; git merge --no-commit --no-ff \"${1-origin/master}\" | grep CONFLICT; if [ $? == 0 ]; then echo -e \"\\033[1;31m --- Merge will conflict :( --- \\033[0m\"; else echo -e \"\\033[1;32m --- No conflict in merge :) --- \\033[0m\"; fi; git merge --abort; }; f"

	lg = log --graph --abbrev-commit --decorate --all --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%C(magenta)\\ [%cn]" --decorate --numstat
	hist = log --graph --abbrev-commit --date=short --decorate --all --pretty=format:'%Cred%h %Cgreen(%ad)%Creset| -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset'

	# See what you are going to push
	out = "!f() { if `git push -n &>/dev/null`; then git push -n 2>&1 |tail -1 |awk {'print $1;'} |xargs git log; else echo "Not in sync or uncommitted changes exist"; fi; } ; f"

	# See what you are going to pull
	in = pull --dry-run --verbose

	# Use Gerrit for code review
	publish = "!f() { git push -u ${1:-origin} HEAD:`git config branch.$(git name-rev --name-only HEAD).merge | sed -e 's@refs/heads/@refs/for/@'`; }; f"

	wdiff = diff --word-diff
	wshow = show --color-words

	# Have merge conflicts and want to quickly solve them using an editor and then add them
	edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; $EDITOR `f`"

	# Quickly take file versions
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	# Prune all tracking local branches that have been removed from remote
	prune-all = !git remote | xargs -n 1 git remote prune

	# Show defined aliases
	alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

[mergetool]
	keepBackup = false
