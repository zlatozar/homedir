;;; SBCL resource file

;;; ____________________________________________________________________________
;;;                         Quicklisp (~/quicklisp/local-projects for projects)

#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;;; ____________________________________________________________________________
;;;                                                          SBCL Configuration

(require :asdf)

;; AllegroCL style REPL, with integrated inspector
(require :sb-aclrepl)

;; Add maximum debug information
(declaim (optimize debug))
(sb-ext:restrict-compiler-policy 'debug 3)

;; M-. to find system definitions
(sb-ext:set-sbcl-source-location "/opt/common-lisp/sbcl/") ; <-- Place right location

;; Mute some warnings
(handler-bind
    ((sb-ext:implicit-generic-function-warning #'muffle-warning)
     (sb-kernel:type-proclamation-mismatch-warning #'muffle-warning)
     (style-warning #'muffle-warning)
     (warning #'muffle-warning)))

;; If a fasl was stale, try to recompile and load (once).
(defmethod asdf:perform :around ((o asdf:load-op)
                                 (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    (sb-ext:invalid-fasl ()
      (asdf:perform (make-instance 'asdf:compile-op) c)
      (call-next-method))))

;;; ____________________________________________________________________________
;;;                                                                   Libraries

;; Before run SBCL place 'lisp-critic' is in ~/quicklisp/local-projects directory
(ql:quickload '(:quickproject :alexandria :iterate :lisp-critic))

(setf quickproject:*author* "Zlatozar Zhelyazkov <zlatozar@gmail.com>")

;; Static Code Analysis
(use-package :lisp-critic)

;; LOOP replacement
(use-package :iterate)

(format *debug-io* "To take latest type:
(ql:update-dist \"quicklisp\")~%")
