(require :sb-aclrepl)

;; Add maximum debug information
(sb-ext:restrict-compiler-policy 'debug 3)

;; Quicklisp includes ASDF2. I like to set up ASDF2 to scan a particular directory tree, ~/projects/lisp/, for local systems.

;; Create a config file named ~/.config/common-lisp/source-registry.conf.d/projects.conf that has this in it:
;;      (:tree (:home "projects/lisp/"))
;;
;; With that file in place, you can add new projects to that directory tree, and after an
;;      (asdf:initialize-source-registry)
;;
;; the project's systems will be loadable with asdf:load-system.  You can unpack tarballs, check
;; things out from source control systems, or create new projects and they'll all be easily available for loading.

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;;________________________________________________________________________________
;;                                                             SBCL Configuration

(handler-bind
    ((sb-ext:implicit-generic-function-warning #'muffle-warning)
     (sb-kernel:type-proclamation-mismatch-warning #'muffle-warning)
     (style-warning #'muffle-warning)
     (warning #'muffle-warning)))

(ql:quickload '(:asdf-driver :swank :quickproject
                :inferior-shell :osicat :alexandria))

(setf quickproject:*author* "Zlatozar Zhelyazkov <zlatozar@gmail.com>")

(setf quickproject:*after-make-project-hooks*
      (list
       (lambda (pathname &rest args)
         (declare (ignore args))
         (nix:chdir (fad:pathname-as-directory pathname))
         (inferior-shell:run (list "git" "init" "."))
         (inferior-shell:run  (list "git" "add" "."))
         (inferior-shell:run (list "git" "commit" "-m" "Initial commit")))))

;;   ;; Functional programming default packages
;;   ;;========================================

;;   ;; Pattern Matching
;;   (asdf:load-system 'optima)

;;   ;; Functional Data Structures
;;   (asdf:load-system 'fset)

;;   ;; Static Code Analysis
;;   (asdf:load-system 'lisp-critic)

;;   ;; Appease Paren Critics
;;   (asdf:load-system 'readable)

;;   ;; Default Namespaces
;;   ;;===================
;;   (use-package :optima)

;;   ;; Unit testing
;;   ;;=============
;;   (asdf:load-system 'fiveam)
